// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Rezoan Tamal",
            "email": "my.name.in.lower.case@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Login with username and password and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login a user",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Register a new user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRegistration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Name or email already taken",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/companies": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new company with the provided details. Requires Authorization header with Bearer token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Create a new company",
                "parameters": [
                    {
                        "description": "Company details",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Company"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Company created successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Company name already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/companies/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get detailed information about a company by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Get a company by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company found",
                        "schema": {
                            "$ref": "#/definitions/models.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid company ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a company by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Delete a company",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Company deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid company ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update specific fields of a company",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "companies"
                ],
                "summary": "Update a company",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Company ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company updated successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Company"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Company name already exists",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.TokenResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT token for authentication",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user_id": {
                    "description": "User ID associated with the token",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                }
            }
        },
        "models.Company": {
            "description": "Company model with all details",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "When the company record was created",
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "description": {
                    "description": "Optional description of the company (max 3000 characters)",
                    "type": "string",
                    "example": "Leading provider of widgets"
                },
                "employee_count": {
                    "description": "Number of employees in the company",
                    "type": "integer",
                    "example": 42
                },
                "id": {
                    "description": "Unique identifier for the company",
                    "type": "string",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "name": {
                    "description": "Name of the company (must be unique, max 15 characters)",
                    "type": "string",
                    "example": "Acme Corp"
                },
                "registered": {
                    "description": "Whether the company is officially registered",
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "description": "Type of company: Corporations, NonProfit, Cooperative, or Sole Proprietorship",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.CompanyType"
                        }
                    ],
                    "example": "Corporations"
                },
                "updated_at": {
                    "description": "When the company record was last updated",
                    "type": "string",
                    "example": "2023-01-02T12:00:00Z"
                }
            }
        },
        "models.CompanyType": {
            "description": "Type of company",
            "type": "string",
            "enum": [
                "Corporations",
                "NonProfit",
                "Cooperative",
                "Sole Proprietorship"
            ],
            "x-enum-varnames": [
                "TypeCorporation",
                "TypeNonProfit",
                "TypeCooperative",
                "TypeSoleProprietor"
            ]
        },
        "models.UserLogin": {
            "description": "User credentials for registration",
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address (required for registration)",
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "description": "Password (at least 8 characters)",
                    "type": "string",
                    "example": "securepassword123"
                }
            }
        },
        "models.UserRegistration": {
            "description": "User credentials for registration",
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address (required for registration)",
                    "type": "string",
                    "example": "john@example.com"
                },
                "name": {
                    "description": "Name for login (at least 3 characters)",
                    "type": "string",
                    "example": "John Doe"
                },
                "password": {
                    "description": "Password (at least 8 characters)",
                    "type": "string",
                    "example": "securepassword123"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and the JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Company Management API",
	Description:      "A company management service API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
